import { WalletSdk as WalletSdkType } from '@radixdlt/wallet-sdk';
import { Logger } from 'tslog';
import { RequestItemClient } from '../request-items/request-item-client';
export type WalletClient = ReturnType<typeof WalletClient>;
export declare const WalletClient: (input: {
    requestItemClient?: RequestItemClient;
    logger?: Logger<unknown>;
    walletSdk: WalletSdkType;
}) => {
    request: ({ oneTimeAccountsWithoutProofOfOwnership, ongoingAccountsWithoutProofOfOwnership, loginWithoutChallenge, usePersona, }: Parameters<WalletSdkType['request']>[0]) => import("neverthrow").ResultAsync<{
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        persona: {
            label: string;
            identityAddress: string;
        } | undefined;
    }, import("@radixdlt/wallet-sdk").SdkError>;
    sendTransaction: (input: Parameters<WalletSdkType['sendTransaction']>[0]) => import("neverthrow").ResultAsync<{
        transactionIntentHash: string;
    }, import("@radixdlt/wallet-sdk").SdkError>;
    pendingRequests$: import("rxjs").Observable<boolean>;
    requestItems$: import("rxjs").Observable<import("@radixdlt/connect-button").RequestItem[]>;
    resetRequestItems: () => void;
    destroy: () => void;
};
