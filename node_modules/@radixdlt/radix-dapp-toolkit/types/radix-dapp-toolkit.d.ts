import { DappMetadata, Explorer, OnConnect, OnDisconnectCallback, OnInitCallback, Providers, State } from './_types';
import { Logger } from 'tslog';
export type RadixDappToolkitConfiguration = {
    initialState?: State;
    logger?: Logger<unknown>;
    networkId?: number;
    onInit?: OnInitCallback;
    onDisconnect?: OnDisconnectCallback;
    providers?: Partial<Providers>;
    useDoneCallback?: boolean;
    explorer?: Explorer;
};
export declare const RadixDappToolkit: ({ dAppDefinitionAddress, dAppName }: DappMetadata, onConnect?: OnConnect, configuration?: RadixDappToolkitConfiguration) => {
    requestData: ({ accounts }: {
        accounts?: ({
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } & {
            oneTime?: boolean | undefined;
        }) | undefined;
    }) => import("neverthrow").ResultAsync<{
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        persona: {
            label: string;
            identityAddress: string;
        } | undefined;
    }, import("@radixdlt/wallet-sdk").SdkError>;
    sendTransaction: (input: {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    }) => import("neverthrow").ResultAsync<{
        transactionIntentHash: string;
    }, import("@radixdlt/wallet-sdk").SdkError>;
    state$: import("rxjs").Observable<State>;
    destroy: () => void;
};
