export type PackageAddressString = `package_${string}`;
export type ResourceAddressString = `resource_${string}`;
export type ComponentAddressString = `component_${string}` | `account_${string}`;
export type SystemAddressString = `system_${string}`;
export declare enum TypeId {
    I8 = "i8",
    I16 = "i16",
    I32 = "i32",
    I64 = "i64",
    I128 = "i128",
    U8 = "u8",
    U16 = "u16",
    U32 = "u32",
    U64 = "u64",
    U128 = "u128",
    Unit = "Unit",
    Bool = "Bool",
    String = "String",
    Enum = "Enum",
    Array = "Array",
    Tuple = "Tuple",
    PackageAddress = "PackageAddress",
    ComponentAddress = "ComponentAddress",
    ResourceAddress = "ResourceAddress",
    SystemAddress = "SystemAddress",
    Bucket = "Bucket",
    Proof = "Proof",
    Expression = "Expression",
    Blob = "Blob",
    NonFungibleAddress = "NonFungibleAddress",
    Hash = "Hash",
    EcdsaSecp256k1PublicKey = "EcdsaSecp256k1PublicKey",
    EcdsaSecp256k1Signature = "EcdsaSecp256k1Signature",
    EddsaEd25519PublicKey = "EddsaEd25519PublicKey",
    EddsaEd25519Signature = "EddsaEd25519Signature",
    Decimal = "Decimal",
    PreciseDecimal = "PreciseDecimal",
    NonFungibleId = "NonFungibleId"
}
export declare class ScryptoValueError extends Error {
    constructor(errorMessage: string);
}
export declare const Unit: () => '()';
export declare const Bool: (bool: boolean) => `${boolean}`;
export declare const I8: <T extends number>(num: T) => `${T}i8`;
export declare const I16: <T extends number>(num: T) => `${T}i16`;
export declare const I32: <T extends number>(num: T) => `${T}i32`;
export declare const I64: <T extends string>(num: T) => `${T}i64`;
export declare const I128: <T extends string>(num: T) => `${T}i128`;
export declare const U8: <T extends number>(num: T) => `${T}u8`;
export declare const U16: <T extends number>(num: T) => `${T}u16`;
export declare const U32: <T extends number>(num: T) => `${T}u32`;
export declare const U64: <T extends string>(num: T) => `${T}u64`;
export declare const U128: <T extends string>(num: T) => `${T}u128`;
export declare const String: <T extends string>(str: T) => `"${T}"`;
export declare const Enum: (field: string, ...args: string[]) => string;
export declare const Tuple: <T extends string[]>(...args: T) => `Tuple(${string})`;
export declare const Array: <T extends TypeId>(type: T, ...args: string[]) => `Array<${T}>(${string})`;
export declare const PackageAddress: (packageAddress: PackageAddressString) => `PackageAddress("${string}")`;
export declare const ComponentAddress: (componentAddress: ComponentAddressString) => `ComponentAddress("${string}")`;
export declare const ResourceAddress: (resourceAddress: ResourceAddressString) => `ResourceAddress("${string}")`;
export declare const SystemAddress: (systemAddress: SystemAddressString) => `SystemAddress("${string}")`;
export declare const Bucket: (bucketId: string | number) => `Bucket(${string})`;
export declare const Proof: (proofId: string | number) => `Proof(${string})`;
export declare const Expression: <T extends string>(expression: T) => `Expression("${T}")`;
export declare const Blob: <T extends string>(blob: T) => `Blob("${T}")`;
export declare const NonFungibleAddress: (resourceAddress: ResourceAddressString, non_fungible_id: string) => `NonFungibleAddress(${string}, ${string})`;
export declare const Hash: (hash: string) => `Hash("${string}")`;
export declare const EcdsaSecp256k1PublicKey: (pk: string) => `EcdsaSecp256k1PublicKey("${string}")`;
export declare const EcdsaSecp256k1Signature: (sig: string) => `EcdsaSecp256k1Signature("${string}")`;
export declare const EddsaEd25519PublicKey: (pk: string) => `EddsaEd25519PublicKey("${string}")`;
export declare const EddsaEd25519Signature: (sig: string) => `EddsaEd25519Signature("${string}")`;
export declare const Decimal: (num: number) => `Decimal("${string}")`;
export declare const PreciseDecimal: (num: number) => `PreciseDecimal("${string}")`;
export declare const NonFungibleId: (id: string) => `NonFungibleId(${string})`;
