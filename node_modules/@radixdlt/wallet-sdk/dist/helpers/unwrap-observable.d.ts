import { Result, ResultAsync } from 'neverthrow';
import { Observable } from 'rxjs';
import { WalletInteractionSuccessResponse } from '../IO/schemas';
import { SdkError } from './error';
export declare const unwrapObservable: (input: Observable<Result<WalletInteractionSuccessResponse, SdkError>>) => ResultAsync<{
    discriminator: "success";
    interactionId: string;
    items: {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    } | {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    } | {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    };
}, SdkError>;
