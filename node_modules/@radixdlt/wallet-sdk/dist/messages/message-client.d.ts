export type MessageClientType = ReturnType<typeof MessageClient>;
export declare const MessageClient: (subjects?: {
    outgoingMessageSubject: import("rxjs").Subject<{
        interactionId: string;
        items: {
            oneTimeAccounts?: {
                requiresProofOfOwnership: boolean;
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
            } | undefined;
            oneTimePersonaData?: {
                fields: string[];
            } | undefined;
            discriminator: "unauthorizedRequest";
        } | {
            oneTimeAccounts?: {
                requiresProofOfOwnership: boolean;
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
            } | undefined;
            ongoingAccounts?: {
                requiresProofOfOwnership: boolean;
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
            } | undefined;
            oneTimePersonaData?: {
                fields: string[];
            } | undefined;
            ongoingPersonaData?: {
                fields: string[];
            } | undefined;
            auth: {
                identityAddress: string;
                discriminator: "usePersona";
            } | {
                challenge?: string | undefined;
                discriminator: "login";
            };
            discriminator: "authorizedRequest";
        } | {
            send: {
                message?: string | undefined;
                blobs?: string[] | undefined;
                transactionManifest: string;
                version: number;
            };
            discriminator: "transaction";
        };
        metadata: {
            networkId: number;
            dAppDefinitionAddress: string;
        };
    }>;
    incomingMessageSubject: import("rxjs").Subject<{
        discriminator: "success";
        interactionId: string;
        items: {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            discriminator: "unauthorizedRequest";
        } | {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            ongoingAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            ongoingPersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            auth: {
                discriminator: "usePersona";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                discriminator: "loginWithoutChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                challenge: string;
                signature: string;
                discriminator: "loginWithChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
                publicKey: string;
            };
            discriminator: "authorizedRequest";
        } | {
            send: {
                transactionIntentHash: string;
            };
            discriminator: "transaction";
        };
    } | {
        message?: string | undefined;
        error: "rejectedByUser" | "wrongNetwork" | "failedToPrepareTransaction" | "failedToCompileTransaction" | "failedToSignTransaction" | "failedToSubmitTransaction" | "failedToPollSubmittedTransaction" | "failedToFindAccountWithEnoughFundsToLockFee" | "submittedTransactionWasDuplicate" | "submittedTransactionHasFailedTransactionStatus" | "submittedTransactionHasRejectedTransactionStatus";
        discriminator: "failure";
        interactionId: string;
    } | {
        eventType: "receivedByExtension";
        interactionId: string;
    }>;
    responseSubject: import("rxjs").Subject<{
        discriminator: "success";
        interactionId: string;
        items: {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            discriminator: "unauthorizedRequest";
        } | {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            ongoingAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            ongoingPersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            auth: {
                discriminator: "usePersona";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                discriminator: "loginWithoutChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                challenge: string;
                signature: string;
                discriminator: "loginWithChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
                publicKey: string;
            };
            discriminator: "authorizedRequest";
        } | {
            send: {
                transactionIntentHash: string;
            };
            discriminator: "transaction";
        };
    } | import("../wallet-sdk").SdkError>;
    messageLifeCycleEventSubject: import("rxjs").Subject<{
        eventType: "receivedByExtension";
        interactionId: string;
    }>;
    dispatchEventSubject: import("rxjs").Subject<import("./_types").MessageDispatch>;
}) => {
    destroy: () => void;
    subjects: {
        outgoingMessageSubject: import("rxjs").Subject<{
            interactionId: string;
            items: {
                oneTimeAccounts?: {
                    requiresProofOfOwnership: boolean;
                    numberOfAccounts: {
                        quantifier: "exactly" | "atLeast";
                        quantity: number;
                    };
                } | undefined;
                oneTimePersonaData?: {
                    fields: string[];
                } | undefined;
                discriminator: "unauthorizedRequest";
            } | {
                oneTimeAccounts?: {
                    requiresProofOfOwnership: boolean;
                    numberOfAccounts: {
                        quantifier: "exactly" | "atLeast";
                        quantity: number;
                    };
                } | undefined;
                ongoingAccounts?: {
                    requiresProofOfOwnership: boolean;
                    numberOfAccounts: {
                        quantifier: "exactly" | "atLeast";
                        quantity: number;
                    };
                } | undefined;
                oneTimePersonaData?: {
                    fields: string[];
                } | undefined;
                ongoingPersonaData?: {
                    fields: string[];
                } | undefined;
                auth: {
                    identityAddress: string;
                    discriminator: "usePersona";
                } | {
                    challenge?: string | undefined;
                    discriminator: "login";
                };
                discriminator: "authorizedRequest";
            } | {
                send: {
                    message?: string | undefined;
                    blobs?: string[] | undefined;
                    transactionManifest: string;
                    version: number;
                };
                discriminator: "transaction";
            };
            metadata: {
                networkId: number;
                dAppDefinitionAddress: string;
            };
        }>;
        incomingMessageSubject: import("rxjs").Subject<{
            discriminator: "success";
            interactionId: string;
            items: {
                oneTimeAccounts?: {
                    accounts: {
                        account: {
                            address: string;
                            label: string;
                            appearanceId: number;
                        };
                        challenge: string;
                        signature: string;
                    }[];
                } | {
                    accounts: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    }[];
                } | undefined;
                oneTimePersonaData?: {
                    fields: {
                        value: string;
                        field: string;
                    }[];
                } | undefined;
                discriminator: "unauthorizedRequest";
            } | {
                oneTimeAccounts?: {
                    accounts: {
                        account: {
                            address: string;
                            label: string;
                            appearanceId: number;
                        };
                        challenge: string;
                        signature: string;
                    }[];
                } | {
                    accounts: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    }[];
                } | undefined;
                ongoingAccounts?: {
                    accounts: {
                        account: {
                            address: string;
                            label: string;
                            appearanceId: number;
                        };
                        challenge: string;
                        signature: string;
                    }[];
                } | {
                    accounts: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    }[];
                } | undefined;
                oneTimePersonaData?: {
                    fields: {
                        value: string;
                        field: string;
                    }[];
                } | undefined;
                ongoingPersonaData?: {
                    fields: {
                        value: string;
                        field: string;
                    }[];
                } | undefined;
                auth: {
                    discriminator: "usePersona";
                    persona: {
                        label: string;
                        identityAddress: string;
                    };
                } | {
                    discriminator: "loginWithoutChallenge";
                    persona: {
                        label: string;
                        identityAddress: string;
                    };
                } | {
                    challenge: string;
                    signature: string;
                    discriminator: "loginWithChallenge";
                    persona: {
                        label: string;
                        identityAddress: string;
                    };
                    publicKey: string;
                };
                discriminator: "authorizedRequest";
            } | {
                send: {
                    transactionIntentHash: string;
                };
                discriminator: "transaction";
            };
        } | {
            message?: string | undefined;
            error: "rejectedByUser" | "wrongNetwork" | "failedToPrepareTransaction" | "failedToCompileTransaction" | "failedToSignTransaction" | "failedToSubmitTransaction" | "failedToPollSubmittedTransaction" | "failedToFindAccountWithEnoughFundsToLockFee" | "submittedTransactionWasDuplicate" | "submittedTransactionHasFailedTransactionStatus" | "submittedTransactionHasRejectedTransactionStatus";
            discriminator: "failure";
            interactionId: string;
        } | {
            eventType: "receivedByExtension";
            interactionId: string;
        }>;
        responseSubject: import("rxjs").Subject<{
            discriminator: "success";
            interactionId: string;
            items: {
                oneTimeAccounts?: {
                    accounts: {
                        account: {
                            address: string;
                            label: string;
                            appearanceId: number;
                        };
                        challenge: string;
                        signature: string;
                    }[];
                } | {
                    accounts: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    }[];
                } | undefined;
                oneTimePersonaData?: {
                    fields: {
                        value: string;
                        field: string;
                    }[];
                } | undefined;
                discriminator: "unauthorizedRequest";
            } | {
                oneTimeAccounts?: {
                    accounts: {
                        account: {
                            address: string;
                            label: string;
                            appearanceId: number;
                        };
                        challenge: string;
                        signature: string;
                    }[];
                } | {
                    accounts: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    }[];
                } | undefined;
                ongoingAccounts?: {
                    accounts: {
                        account: {
                            address: string;
                            label: string;
                            appearanceId: number;
                        };
                        challenge: string;
                        signature: string;
                    }[];
                } | {
                    accounts: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    }[];
                } | undefined;
                oneTimePersonaData?: {
                    fields: {
                        value: string;
                        field: string;
                    }[];
                } | undefined;
                ongoingPersonaData?: {
                    fields: {
                        value: string;
                        field: string;
                    }[];
                } | undefined;
                auth: {
                    discriminator: "usePersona";
                    persona: {
                        label: string;
                        identityAddress: string;
                    };
                } | {
                    discriminator: "loginWithoutChallenge";
                    persona: {
                        label: string;
                        identityAddress: string;
                    };
                } | {
                    challenge: string;
                    signature: string;
                    discriminator: "loginWithChallenge";
                    persona: {
                        label: string;
                        identityAddress: string;
                    };
                    publicKey: string;
                };
                discriminator: "authorizedRequest";
            } | {
                send: {
                    transactionIntentHash: string;
                };
                discriminator: "transaction";
            };
        } | import("../wallet-sdk").SdkError>;
        messageLifeCycleEventSubject: import("rxjs").Subject<{
            eventType: "receivedByExtension";
            interactionId: string;
        }>;
        dispatchEventSubject: import("rxjs").Subject<import("./_types").MessageDispatch>;
    };
};
