import { Subject } from 'rxjs';
import { SdkError } from '../helpers/error';
import { MessageDispatch } from './_types';
export type SubjectsType = ReturnType<typeof Subjects>;
export declare const Subjects: () => {
    outgoingMessageSubject: Subject<{
        interactionId: string;
        items: {
            oneTimeAccounts?: {
                requiresProofOfOwnership: boolean;
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
            } | undefined;
            oneTimePersonaData?: {
                fields: string[];
            } | undefined;
            discriminator: "unauthorizedRequest";
        } | {
            oneTimeAccounts?: {
                requiresProofOfOwnership: boolean;
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
            } | undefined;
            ongoingAccounts?: {
                requiresProofOfOwnership: boolean;
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
            } | undefined;
            oneTimePersonaData?: {
                fields: string[];
            } | undefined;
            ongoingPersonaData?: {
                fields: string[];
            } | undefined;
            auth: {
                identityAddress: string;
                discriminator: "usePersona";
            } | {
                challenge?: string | undefined;
                discriminator: "login";
            };
            discriminator: "authorizedRequest";
        } | {
            send: {
                message?: string | undefined;
                blobs?: string[] | undefined;
                transactionManifest: string;
                version: number;
            };
            discriminator: "transaction";
        };
        metadata: {
            networkId: number;
            dAppDefinitionAddress: string;
        };
    }>;
    incomingMessageSubject: Subject<{
        discriminator: "success";
        interactionId: string;
        items: {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            discriminator: "unauthorizedRequest";
        } | {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            ongoingAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            ongoingPersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            auth: {
                discriminator: "usePersona";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                discriminator: "loginWithoutChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                challenge: string;
                signature: string;
                discriminator: "loginWithChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
                publicKey: string;
            };
            discriminator: "authorizedRequest";
        } | {
            send: {
                transactionIntentHash: string;
            };
            discriminator: "transaction";
        };
    } | {
        message?: string | undefined;
        error: "rejectedByUser" | "wrongNetwork" | "failedToPrepareTransaction" | "failedToCompileTransaction" | "failedToSignTransaction" | "failedToSubmitTransaction" | "failedToPollSubmittedTransaction" | "failedToFindAccountWithEnoughFundsToLockFee" | "submittedTransactionWasDuplicate" | "submittedTransactionHasFailedTransactionStatus" | "submittedTransactionHasRejectedTransactionStatus";
        discriminator: "failure";
        interactionId: string;
    } | {
        eventType: "receivedByExtension";
        interactionId: string;
    }>;
    responseSubject: Subject<{
        discriminator: "success";
        interactionId: string;
        items: {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            discriminator: "unauthorizedRequest";
        } | {
            oneTimeAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            ongoingAccounts?: {
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | undefined;
            oneTimePersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            ongoingPersonaData?: {
                fields: {
                    value: string;
                    field: string;
                }[];
            } | undefined;
            auth: {
                discriminator: "usePersona";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                discriminator: "loginWithoutChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
            } | {
                challenge: string;
                signature: string;
                discriminator: "loginWithChallenge";
                persona: {
                    label: string;
                    identityAddress: string;
                };
                publicKey: string;
            };
            discriminator: "authorizedRequest";
        } | {
            send: {
                transactionIntentHash: string;
            };
            discriminator: "transaction";
        };
    } | SdkError>;
    messageLifeCycleEventSubject: Subject<{
        eventType: "receivedByExtension";
        interactionId: string;
    }>;
    dispatchEventSubject: Subject<MessageDispatch>;
};
