import { Ok } from 'neverthrow';
import { WalletInteraction } from '../IO/schemas';
import { Metadata } from './_types';
export declare const createMessage: (metadata: Metadata) => <T extends {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    discriminator: "unauthorizedRequest";
} | {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    ongoingAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    ongoingPersonaData?: {
        fields: string[];
    } | undefined;
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        challenge?: string | undefined;
        discriminator: "login";
    };
    discriminator: "authorizedRequest";
} | {
    send: {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    };
    discriminator: "transaction";
}>(items: T, interactionId?: string) => Ok<WalletInteraction, never>;
