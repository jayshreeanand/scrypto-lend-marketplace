import z from 'zod';
export declare const RequestTypeSchema: {
    readonly oneTimeAccounts: z.ZodLiteral<"oneTimeAccounts">;
    readonly ongoingAccounts: z.ZodLiteral<"ongoingAccounts">;
    readonly oneTimePersonaData: z.ZodLiteral<"oneTimePersonaData">;
    readonly ongoingPersonaData: z.ZodLiteral<"ongoingPersonaData">;
    readonly auth: z.ZodLiteral<"auth">;
    readonly send: z.ZodLiteral<"send">;
};
export declare const ErrorTypeSchema: z.ZodUnion<[z.ZodLiteral<"rejectedByUser">, z.ZodLiteral<"wrongNetwork">, z.ZodLiteral<"failedToPrepareTransaction">, z.ZodLiteral<"failedToCompileTransaction">, z.ZodLiteral<"failedToSignTransaction">, z.ZodLiteral<"failedToSubmitTransaction">, z.ZodLiteral<"failedToPollSubmittedTransaction">, z.ZodLiteral<"failedToFindAccountWithEnoughFundsToLockFee">, z.ZodLiteral<"submittedTransactionWasDuplicate">, z.ZodLiteral<"submittedTransactionHasFailedTransactionStatus">, z.ZodLiteral<"submittedTransactionHasRejectedTransactionStatus">]>;
declare const AccountSchema: z.ZodObject<{
    address: z.ZodString;
    label: z.ZodString;
    appearanceId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    address: string;
    label: string;
    appearanceId: number;
}, {
    address: string;
    label: string;
    appearanceId: number;
}>;
export type Account = z.infer<typeof AccountSchema>;
declare const AccountWithProofOfOwnershipSchema: z.ZodObject<{
    account: z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>;
    challenge: z.ZodString;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    account: {
        address: string;
        label: string;
        appearanceId: number;
    };
    challenge: string;
    signature: string;
}, {
    account: {
        address: string;
        label: string;
        appearanceId: number;
    };
    challenge: string;
    signature: string;
}>;
export type AccountWithProofOfOwnership = z.infer<typeof AccountWithProofOfOwnershipSchema>;
declare const PersonaSchema: z.ZodObject<{
    identityAddress: z.ZodString;
    label: z.ZodString;
}, "strip", z.ZodTypeAny, {
    label: string;
    identityAddress: string;
}, {
    label: string;
    identityAddress: string;
}>;
export type Persona = z.infer<typeof PersonaSchema>;
declare const PersonaDataFieldSchema: z.ZodObject<{
    field: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    field: string;
}, {
    value: string;
    field: string;
}>;
export type PersonaDataField = z.infer<typeof PersonaDataFieldSchema>;
declare const NumberOfAccountsQuantifierSchema: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
export type NumberOfAccountsQuantifier = z.infer<typeof NumberOfAccountsQuantifierSchema>;
declare const NumberOfAccountsSchema: z.ZodObject<{
    quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
    quantity: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    quantifier: "exactly" | "atLeast";
    quantity: number;
}, {
    quantifier: "exactly" | "atLeast";
    quantity: number;
}>;
export type NumberOfAccounts = z.infer<typeof NumberOfAccountsSchema>;
declare const MetadataSchema: z.ZodObject<{
    networkId: z.ZodNumber;
    dAppDefinitionAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    networkId: number;
    dAppDefinitionAddress: string;
}, {
    networkId: number;
    dAppDefinitionAddress: string;
}>;
export type Metadata = z.infer<typeof MetadataSchema>;
declare const OneTimeAccountsRequestItemSchema: z.ZodObject<{
    requiresProofOfOwnership: z.ZodBoolean;
    numberOfAccounts: z.ZodObject<{
        quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }>;
}, "strip", z.ZodTypeAny, {
    requiresProofOfOwnership: boolean;
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
}, {
    requiresProofOfOwnership: boolean;
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
}>;
export type OneTimeAccountsRequestItem = z.infer<typeof OneTimeAccountsRequestItemSchema>;
declare const OneTimeAccountsWithProofOfOwnershipRequestResponseItemSchema: z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>;
export type OneTimeAccountsWithProofOfOwnershipRequestResponseItem = z.infer<typeof OneTimeAccountsWithProofOfOwnershipRequestResponseItemSchema>;
declare const OneTimeAccountsWithoutProofOfOwnershipRequestResponseItemSchema: z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>;
export type OneTimeAccountsWithoutProofOfOwnershipRequestResponseItem = z.infer<typeof OneTimeAccountsWithoutProofOfOwnershipRequestResponseItemSchema>;
export declare const OneTimeAccountsRequestResponseItemSchema: z.ZodUnion<[z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>, z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>]>;
export type OneTimeAccountsRequestResponseItem = z.infer<typeof OneTimeAccountsRequestResponseItemSchema>;
declare const OngoingAccountsRequestItemSchema: z.ZodObject<{
    requiresProofOfOwnership: z.ZodBoolean;
    numberOfAccounts: z.ZodObject<{
        quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }>;
}, "strip", z.ZodTypeAny, {
    requiresProofOfOwnership: boolean;
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
}, {
    requiresProofOfOwnership: boolean;
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
}>;
export type OngoingAccountsRequestItem = z.infer<typeof OngoingAccountsRequestItemSchema>;
declare const OngoingAccountsWithProofOfOwnershipRequestResponseItemSchema: z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>;
export type OngoingAccountsWithProofOfOwnershipRequestResponseItem = z.infer<typeof OngoingAccountsWithProofOfOwnershipRequestResponseItemSchema>;
declare const OngoingAccountsWithoutProofOfOwnershipRequestResponseItemSchema: z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>;
export type OngoingAccountsWithoutProofOfOwnershipRequestResponseItem = z.infer<typeof OngoingAccountsWithoutProofOfOwnershipRequestResponseItemSchema>;
declare const OngoingAccountsRequestResponseItemSchema: z.ZodUnion<[z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>, z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>]>;
export type OngoingAccountsRequestResponseItem = z.infer<typeof OngoingAccountsRequestResponseItemSchema>;
declare const OneTimePersonaDataRequestItemSchema: z.ZodObject<{
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    fields: string[];
}, {
    fields: string[];
}>;
export type OneTimePersonaDataRequestItem = z.infer<typeof OneTimePersonaDataRequestItemSchema>;
declare const OneTimePersonaDataRequestResponseItemSchema: z.ZodObject<{
    fields: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        field: string;
    }, {
        value: string;
        field: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    fields: {
        value: string;
        field: string;
    }[];
}, {
    fields: {
        value: string;
        field: string;
    }[];
}>;
export type OneTimePersonaDataRequestResponseItem = z.infer<typeof OneTimePersonaDataRequestResponseItemSchema>;
declare const OngoingPersonaDataRequestItemSchema: z.ZodObject<{
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    fields: string[];
}, {
    fields: string[];
}>;
export type OngoingPersonaDataRequestItem = z.infer<typeof OngoingPersonaDataRequestItemSchema>;
declare const OngoingPersonaDataRequestResponseItemSchema: z.ZodObject<{
    fields: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        field: string;
    }, {
        value: string;
        field: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    fields: {
        value: string;
        field: string;
    }[];
}, {
    fields: {
        value: string;
        field: string;
    }[];
}>;
export type OngoingPersonaDataRequestResponseItem = z.infer<typeof OngoingPersonaDataRequestResponseItemSchema>;
declare const AuthUsePersonaRequestItemSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    identityAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    identityAddress: string;
    discriminator: "usePersona";
}, {
    identityAddress: string;
    discriminator: "usePersona";
}>;
export type AuthUsePersonaRequestItem = z.infer<typeof AuthUsePersonaRequestItemSchema>;
declare const AuthUsePersonaRequestResponseItemSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "usePersona";
    persona: {
        label: string;
        identityAddress: string;
    };
}, {
    discriminator: "usePersona";
    persona: {
        label: string;
        identityAddress: string;
    };
}>;
export type AuthUsePersonaRequestResponseItem = z.infer<typeof AuthUsePersonaRequestResponseItemSchema>;
declare const AuthLoginRequestItemSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"login">;
    challenge: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    challenge?: string | undefined;
    discriminator: "login";
}, {
    challenge?: string | undefined;
    discriminator: "login";
}>;
export type AuthLoginRequestItem = z.infer<typeof AuthLoginRequestItemSchema>;
declare const AuthLoginWithoutChallengeRequestResponseItemSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
}, {
    discriminator: "loginWithoutChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
}>;
export type AuthLoginWithoutChallengeRequestResponseItem = z.infer<typeof AuthLoginWithoutChallengeRequestResponseItemSchema>;
declare const AuthLoginWithChallengeRequestResponseItemSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    publicKey: z.ZodString;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    signature: string;
    discriminator: "loginWithChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
    publicKey: string;
}, {
    challenge: string;
    signature: string;
    discriminator: "loginWithChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
    publicKey: string;
}>;
export type AuthLoginWithChallengeRequestResponseItem = z.infer<typeof AuthLoginWithChallengeRequestResponseItemSchema>;
export declare const AuthLoginRequestResponseItemSchema: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
}, {
    discriminator: "loginWithoutChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    publicKey: z.ZodString;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    signature: string;
    discriminator: "loginWithChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
    publicKey: string;
}, {
    challenge: string;
    signature: string;
    discriminator: "loginWithChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
    publicKey: string;
}>]>;
export type AuthLoginRequestResponseItem = z.infer<typeof AuthLoginRequestResponseItemSchema>;
export declare const AuthRequestItemSchema: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    identityAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    identityAddress: string;
    discriminator: "usePersona";
}, {
    identityAddress: string;
    discriminator: "usePersona";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"login">;
    challenge: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    challenge?: string | undefined;
    discriminator: "login";
}, {
    challenge?: string | undefined;
    discriminator: "login";
}>]>;
export type AuthRequestItem = z.infer<typeof AuthRequestItemSchema>;
declare const AuthRequestResponseItemSchema: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "usePersona";
    persona: {
        label: string;
        identityAddress: string;
    };
}, {
    discriminator: "usePersona";
    persona: {
        label: string;
        identityAddress: string;
    };
}>, z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
}, {
    discriminator: "loginWithoutChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    publicKey: z.ZodString;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    signature: string;
    discriminator: "loginWithChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
    publicKey: string;
}, {
    challenge: string;
    signature: string;
    discriminator: "loginWithChallenge";
    persona: {
        label: string;
        identityAddress: string;
    };
    publicKey: string;
}>]>]>;
export type AuthRequestResponseItem = z.infer<typeof AuthRequestResponseItemSchema>;
declare const SendTransactionRequestItemSchema: z.ZodObject<{
    transactionManifest: z.ZodString;
    version: z.ZodNumber;
    blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string | undefined;
    blobs?: string[] | undefined;
    transactionManifest: string;
    version: number;
}, {
    message?: string | undefined;
    blobs?: string[] | undefined;
    transactionManifest: string;
    version: number;
}>;
export type SendTransactionItem = z.infer<typeof SendTransactionRequestItemSchema>;
declare const SendTransactionResponseItemSchema: z.ZodObject<{
    transactionIntentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transactionIntentHash: string;
}, {
    transactionIntentHash: string;
}>;
export type SendTransactionResponseItem = z.infer<typeof SendTransactionResponseItemSchema>;
declare const WalletUnauthorizedRequestItemsSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}>;
export type WalletUnauthorizedRequestItems = z.infer<typeof WalletUnauthorizedRequestItemsSchema>;
declare const WalletAuthorizedRequestItemsSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"login">;
        challenge: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        challenge?: string | undefined;
        discriminator: "login";
    }, {
        challenge?: string | undefined;
        discriminator: "login";
    }>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    ongoingAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    ongoingPersonaData?: {
        fields: string[];
    } | undefined;
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        challenge?: string | undefined;
        discriminator: "login";
    };
    discriminator: "authorizedRequest";
}, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    ongoingAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    ongoingPersonaData?: {
        fields: string[];
    } | undefined;
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        challenge?: string | undefined;
        discriminator: "login";
    };
    discriminator: "authorizedRequest";
}>;
export type WalletAuthorizedRequestItems = z.infer<typeof WalletAuthorizedRequestItemsSchema>;
export declare const WalletRequestItemsSchema: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"login">;
        challenge: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        challenge?: string | undefined;
        discriminator: "login";
    }, {
        challenge?: string | undefined;
        discriminator: "login";
    }>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    ongoingAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    ongoingPersonaData?: {
        fields: string[];
    } | undefined;
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        challenge?: string | undefined;
        discriminator: "login";
    };
    discriminator: "authorizedRequest";
}, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    ongoingAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    ongoingPersonaData?: {
        fields: string[];
    } | undefined;
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        challenge?: string | undefined;
        discriminator: "login";
    };
    discriminator: "authorizedRequest";
}>]>;
export type WalletRequestItems = z.infer<typeof WalletRequestItemsSchema>;
declare const WalletTransactionItemsSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionManifest: z.ZodString;
        version: z.ZodNumber;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    }, {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    }>;
}, "strip", z.ZodTypeAny, {
    send: {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    };
    discriminator: "transaction";
}, {
    send: {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    };
    discriminator: "transaction";
}>;
export type WalletTransactionItems = z.infer<typeof WalletTransactionItemsSchema>;
declare const WalletInteractionItemsSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"login">;
        challenge: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        challenge?: string | undefined;
        discriminator: "login";
    }, {
        challenge?: string | undefined;
        discriminator: "login";
    }>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }, {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: string[];
    }, {
        fields: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    ongoingAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    ongoingPersonaData?: {
        fields: string[];
    } | undefined;
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        challenge?: string | undefined;
        discriminator: "login";
    };
    discriminator: "authorizedRequest";
}, {
    oneTimeAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    ongoingAccounts?: {
        requiresProofOfOwnership: boolean;
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
    } | undefined;
    oneTimePersonaData?: {
        fields: string[];
    } | undefined;
    ongoingPersonaData?: {
        fields: string[];
    } | undefined;
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        challenge?: string | undefined;
        discriminator: "login";
    };
    discriminator: "authorizedRequest";
}>]>, z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionManifest: z.ZodString;
        version: z.ZodNumber;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    }, {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    }>;
}, "strip", z.ZodTypeAny, {
    send: {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    };
    discriminator: "transaction";
}, {
    send: {
        message?: string | undefined;
        blobs?: string[] | undefined;
        transactionManifest: string;
        version: number;
    };
    discriminator: "transaction";
}>]>;
export type WalletInteractionItems = z.infer<typeof WalletInteractionItemsSchema>;
export declare const WalletInteractionSchema: z.ZodObject<{
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodObject<{
            requiresProofOfOwnership: z.ZodBoolean;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        }, {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: string[];
        }, {
            fields: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    }, {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            identityAddress: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            identityAddress: string;
            discriminator: "usePersona";
        }, {
            identityAddress: string;
            discriminator: "usePersona";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"login">;
            challenge: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            challenge?: string | undefined;
            discriminator: "login";
        }, {
            challenge?: string | undefined;
            discriminator: "login";
        }>]>;
        oneTimeAccounts: z.ZodOptional<z.ZodObject<{
            requiresProofOfOwnership: z.ZodBoolean;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        }, {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodObject<{
            requiresProofOfOwnership: z.ZodBoolean;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        }, {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: string[];
        }, {
            fields: string[];
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: string[];
        }, {
            fields: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        ongoingAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        ongoingPersonaData?: {
            fields: string[];
        } | undefined;
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            challenge?: string | undefined;
            discriminator: "login";
        };
        discriminator: "authorizedRequest";
    }, {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        ongoingAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        ongoingPersonaData?: {
            fields: string[];
        } | undefined;
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            challenge?: string | undefined;
            discriminator: "login";
        };
        discriminator: "authorizedRequest";
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionManifest: z.ZodString;
            version: z.ZodNumber;
            blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            message: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message?: string | undefined;
            blobs?: string[] | undefined;
            transactionManifest: string;
            version: number;
        }, {
            message?: string | undefined;
            blobs?: string[] | undefined;
            transactionManifest: string;
            version: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        send: {
            message?: string | undefined;
            blobs?: string[] | undefined;
            transactionManifest: string;
            version: number;
        };
        discriminator: "transaction";
    }, {
        send: {
            message?: string | undefined;
            blobs?: string[] | undefined;
            transactionManifest: string;
            version: number;
        };
        discriminator: "transaction";
    }>]>;
    metadata: z.ZodObject<{
        networkId: z.ZodNumber;
        dAppDefinitionAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        networkId: number;
        dAppDefinitionAddress: string;
    }, {
        networkId: number;
        dAppDefinitionAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    interactionId: string;
    items: {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    } | {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        ongoingAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        ongoingPersonaData?: {
            fields: string[];
        } | undefined;
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            challenge?: string | undefined;
            discriminator: "login";
        };
        discriminator: "authorizedRequest";
    } | {
        send: {
            message?: string | undefined;
            blobs?: string[] | undefined;
            transactionManifest: string;
            version: number;
        };
        discriminator: "transaction";
    };
    metadata: {
        networkId: number;
        dAppDefinitionAddress: string;
    };
}, {
    interactionId: string;
    items: {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    } | {
        oneTimeAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        ongoingAccounts?: {
            requiresProofOfOwnership: boolean;
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
        } | undefined;
        oneTimePersonaData?: {
            fields: string[];
        } | undefined;
        ongoingPersonaData?: {
            fields: string[];
        } | undefined;
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            challenge?: string | undefined;
            discriminator: "login";
        };
        discriminator: "authorizedRequest";
    } | {
        send: {
            message?: string | undefined;
            blobs?: string[] | undefined;
            transactionManifest: string;
            version: number;
        };
        discriminator: "transaction";
    };
    metadata: {
        networkId: number;
        dAppDefinitionAddress: string;
    };
}>;
export type WalletInteraction = z.infer<typeof WalletInteractionSchema>;
export declare const WalletUnauthorizedRequestResponseItemsSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}>;
export type WalletUnauthorizedRequestResponseItems = z.infer<typeof WalletUnauthorizedRequestResponseItemsSchema>;
export declare const WalletAuthorizedRequestResponseItemsSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    }, {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    }, {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        publicKey: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    }, {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    }>]>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    ongoingAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    ongoingPersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    auth: {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    };
    discriminator: "authorizedRequest";
}, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    ongoingPersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    auth: {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    };
    discriminator: "authorizedRequest";
}>;
export type WalletAuthorizedRequestResponseItems = z.infer<typeof WalletAuthorizedRequestResponseItemsSchema>;
export declare const WalletRequestResponseItemsSchema: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    }, {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    }, {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        publicKey: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    }, {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    }>]>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    ongoingAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    ongoingPersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    auth: {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    };
    discriminator: "authorizedRequest";
}, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    ongoingPersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    auth: {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    };
    discriminator: "authorizedRequest";
}>]>;
export type WalletRequestResponseItems = z.infer<typeof WalletRequestResponseItemsSchema>;
export declare const WalletTransactionResponseItemsSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transactionIntentHash: string;
    }, {
        transactionIntentHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    send: {
        transactionIntentHash: string;
    };
    discriminator: "transaction";
}, {
    send: {
        transactionIntentHash: string;
    };
    discriminator: "transaction";
}>;
export type WalletTransactionResponseItems = z.infer<typeof WalletTransactionResponseItemsSchema>;
export declare const WalletInteractionResponseItemsSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    discriminator: "unauthorizedRequest";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    }, {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    }, {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        publicKey: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    }, {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    }>]>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    ongoingAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        fields: {
            value: string;
            field: string;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    ongoingPersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    auth: {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    };
    discriminator: "authorizedRequest";
}, {
    oneTimeAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | undefined;
    oneTimePersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    ongoingPersonaData?: {
        fields: {
            value: string;
            field: string;
        }[];
    } | undefined;
    auth: {
        discriminator: "usePersona";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        discriminator: "loginWithoutChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
    } | {
        challenge: string;
        signature: string;
        discriminator: "loginWithChallenge";
        persona: {
            label: string;
            identityAddress: string;
        };
        publicKey: string;
    };
    discriminator: "authorizedRequest";
}>]>, z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transactionIntentHash: string;
    }, {
        transactionIntentHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    send: {
        transactionIntentHash: string;
    };
    discriminator: "transaction";
}, {
    send: {
        transactionIntentHash: string;
    };
    discriminator: "transaction";
}>]>;
export type WalletInteractionResponseItems = z.infer<typeof WalletInteractionResponseItemsSchema>;
export declare const WalletInteractionSuccessResponseSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"success">;
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                account: z.ZodObject<{
                    address: z.ZodString;
                    label: z.ZodString;
                    appearanceId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }>;
                challenge: z.ZodString;
                signature: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }>, z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }>]>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodObject<{
                field: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                field: string;
            }, {
                value: string;
                field: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: {
                value: string;
                field: string;
            }[];
        }, {
            fields: {
                value: string;
                field: string;
            }[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    }, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        }, {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        }, {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
            challenge: z.ZodString;
            publicKey: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        }, {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        }>]>]>;
        oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                account: z.ZodObject<{
                    address: z.ZodString;
                    label: z.ZodString;
                    appearanceId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }>;
                challenge: z.ZodString;
                signature: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }>, z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }>]>>;
        ongoingAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                account: z.ZodObject<{
                    address: z.ZodString;
                    label: z.ZodString;
                    appearanceId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }>;
                challenge: z.ZodString;
                signature: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }>, z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }>]>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodObject<{
                field: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                field: string;
            }, {
                value: string;
                field: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: {
                value: string;
                field: string;
            }[];
        }, {
            fields: {
                value: string;
                field: string;
            }[];
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodObject<{
                field: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                field: string;
            }, {
                value: string;
                field: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: {
                value: string;
                field: string;
            }[];
        }, {
            fields: {
                value: string;
                field: string;
            }[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    }, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionIntentHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transactionIntentHash: string;
        }, {
            transactionIntentHash: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    }, {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "success";
    interactionId: string;
    items: {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    } | {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    } | {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    };
}, {
    discriminator: "success";
    interactionId: string;
    items: {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    } | {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    } | {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    };
}>;
export type WalletInteractionSuccessResponse = z.infer<typeof WalletInteractionSuccessResponseSchema>;
export declare const WalletInteractionFailureResponseSchema: z.ZodObject<{
    discriminator: z.ZodLiteral<"failure">;
    interactionId: z.ZodString;
    error: z.ZodUnion<[z.ZodLiteral<"rejectedByUser">, z.ZodLiteral<"wrongNetwork">, z.ZodLiteral<"failedToPrepareTransaction">, z.ZodLiteral<"failedToCompileTransaction">, z.ZodLiteral<"failedToSignTransaction">, z.ZodLiteral<"failedToSubmitTransaction">, z.ZodLiteral<"failedToPollSubmittedTransaction">, z.ZodLiteral<"failedToFindAccountWithEnoughFundsToLockFee">, z.ZodLiteral<"submittedTransactionWasDuplicate">, z.ZodLiteral<"submittedTransactionHasFailedTransactionStatus">, z.ZodLiteral<"submittedTransactionHasRejectedTransactionStatus">]>;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string | undefined;
    error: "rejectedByUser" | "wrongNetwork" | "failedToPrepareTransaction" | "failedToCompileTransaction" | "failedToSignTransaction" | "failedToSubmitTransaction" | "failedToPollSubmittedTransaction" | "failedToFindAccountWithEnoughFundsToLockFee" | "submittedTransactionWasDuplicate" | "submittedTransactionHasFailedTransactionStatus" | "submittedTransactionHasRejectedTransactionStatus";
    discriminator: "failure";
    interactionId: string;
}, {
    message?: string | undefined;
    error: "rejectedByUser" | "wrongNetwork" | "failedToPrepareTransaction" | "failedToCompileTransaction" | "failedToSignTransaction" | "failedToSubmitTransaction" | "failedToPollSubmittedTransaction" | "failedToFindAccountWithEnoughFundsToLockFee" | "submittedTransactionWasDuplicate" | "submittedTransactionHasFailedTransactionStatus" | "submittedTransactionHasRejectedTransactionStatus";
    discriminator: "failure";
    interactionId: string;
}>;
export type WalletInteractionFailureResponse = z.infer<typeof WalletInteractionFailureResponseSchema>;
export declare const WalletInteractionResponseSchema: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"success">;
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                account: z.ZodObject<{
                    address: z.ZodString;
                    label: z.ZodString;
                    appearanceId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }>;
                challenge: z.ZodString;
                signature: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }>, z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }>]>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodObject<{
                field: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                field: string;
            }, {
                value: string;
                field: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: {
                value: string;
                field: string;
            }[];
        }, {
            fields: {
                value: string;
                field: string;
            }[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    }, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        }, {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        }, {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
            challenge: z.ZodString;
            publicKey: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        }, {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        }>]>]>;
        oneTimeAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                account: z.ZodObject<{
                    address: z.ZodString;
                    label: z.ZodString;
                    appearanceId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }>;
                challenge: z.ZodString;
                signature: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }>, z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }>]>>;
        ongoingAccounts: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                account: z.ZodObject<{
                    address: z.ZodString;
                    label: z.ZodString;
                    appearanceId: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }, {
                    address: string;
                    label: string;
                    appearanceId: number;
                }>;
                challenge: z.ZodString;
                signature: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }, {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }, {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        }>, z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        }>]>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodObject<{
                field: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                field: string;
            }, {
                value: string;
                field: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: {
                value: string;
                field: string;
            }[];
        }, {
            fields: {
                value: string;
                field: string;
            }[];
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            fields: z.ZodArray<z.ZodObject<{
                field: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                field: string;
            }, {
                value: string;
                field: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            fields: {
                value: string;
                field: string;
            }[];
        }, {
            fields: {
                value: string;
                field: string;
            }[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    }, {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionIntentHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transactionIntentHash: string;
        }, {
            transactionIntentHash: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    }, {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "success";
    interactionId: string;
    items: {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    } | {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    } | {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    };
}, {
    discriminator: "success";
    interactionId: string;
    items: {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        discriminator: "unauthorizedRequest";
    } | {
        oneTimeAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | undefined;
        oneTimePersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        ongoingPersonaData?: {
            fields: {
                value: string;
                field: string;
            }[];
        } | undefined;
        auth: {
            discriminator: "usePersona";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            discriminator: "loginWithoutChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
        } | {
            challenge: string;
            signature: string;
            discriminator: "loginWithChallenge";
            persona: {
                label: string;
                identityAddress: string;
            };
            publicKey: string;
        };
        discriminator: "authorizedRequest";
    } | {
        send: {
            transactionIntentHash: string;
        };
        discriminator: "transaction";
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"failure">;
    interactionId: z.ZodString;
    error: z.ZodUnion<[z.ZodLiteral<"rejectedByUser">, z.ZodLiteral<"wrongNetwork">, z.ZodLiteral<"failedToPrepareTransaction">, z.ZodLiteral<"failedToCompileTransaction">, z.ZodLiteral<"failedToSignTransaction">, z.ZodLiteral<"failedToSubmitTransaction">, z.ZodLiteral<"failedToPollSubmittedTransaction">, z.ZodLiteral<"failedToFindAccountWithEnoughFundsToLockFee">, z.ZodLiteral<"submittedTransactionWasDuplicate">, z.ZodLiteral<"submittedTransactionHasFailedTransactionStatus">, z.ZodLiteral<"submittedTransactionHasRejectedTransactionStatus">]>;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string | undefined;
    error: "rejectedByUser" | "wrongNetwork" | "failedToPrepareTransaction" | "failedToCompileTransaction" | "failedToSignTransaction" | "failedToSubmitTransaction" | "failedToPollSubmittedTransaction" | "failedToFindAccountWithEnoughFundsToLockFee" | "submittedTransactionWasDuplicate" | "submittedTransactionHasFailedTransactionStatus" | "submittedTransactionHasRejectedTransactionStatus";
    discriminator: "failure";
    interactionId: string;
}, {
    message?: string | undefined;
    error: "rejectedByUser" | "wrongNetwork" | "failedToPrepareTransaction" | "failedToCompileTransaction" | "failedToSignTransaction" | "failedToSubmitTransaction" | "failedToPollSubmittedTransaction" | "failedToFindAccountWithEnoughFundsToLockFee" | "submittedTransactionWasDuplicate" | "submittedTransactionHasFailedTransactionStatus" | "submittedTransactionHasRejectedTransactionStatus";
    discriminator: "failure";
    interactionId: string;
}>]>;
export type WalletInteractionResponse = z.infer<typeof WalletInteractionResponseSchema>;
export {};
