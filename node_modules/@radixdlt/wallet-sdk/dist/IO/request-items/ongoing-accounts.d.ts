import { Account, AccountWithProofOfOwnership, NumberOfAccountsQuantifier, OngoingAccountsRequestItem, OngoingAccountsWithoutProofOfOwnershipRequestResponseItem, OngoingAccountsWithProofOfOwnershipRequestResponseItem } from '../schemas';
export type OngoingAccounts = {
    WithoutProofOfOwnership: {
        wallet: {
            request: OngoingAccountsRequestItem;
            response: OngoingAccountsWithoutProofOfOwnershipRequestResponseItem;
        };
        method: {
            input: {
                quantity: number;
                quantifier: NumberOfAccountsQuantifier;
            };
            output: {
                ongoingAccounts: Account[];
            };
        };
    };
    WithProofOfOwnership: {
        wallet: {
            request: OngoingAccountsRequestItem;
            response: OngoingAccountsWithProofOfOwnershipRequestResponseItem;
        };
        method: {
            input: {
                quantity: number;
                quantifier: NumberOfAccountsQuantifier;
            };
            output: {
                ongoingAccounts: AccountWithProofOfOwnership[];
            };
        };
    };
};
type RequiredKeys = {
    usePersona: any;
} | {
    loginWithoutChallenge: any;
} | {
    loginWithChallenge: any;
};
type NotAllowedKeys = Partial<{
    ongoingAccounts: any;
    ongoingAccountsWithProofOfOwnership: any;
}>;
export declare const ongoingAccounts: {
    withoutProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I extends RequiredKeys>(input: I extends Partial<{
        ongoingAccounts: any;
        ongoingAccountsWithProofOfOwnership: any;
    }> ? never : I) => (I extends Partial<{
        ongoingAccounts: any;
        ongoingAccountsWithProofOfOwnership: any;
    }> ? never : I) & {
        ongoingAccountsWithoutProofOfOwnership: {
            quantity: number;
            quantifier: "exactly" | "atLeast";
        };
    };
    withProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I_1 extends RequiredKeys>(input: I_1 extends Partial<{
        ongoingAccounts: any;
        ongoingAccountsWithProofOfOwnership: any;
    }> ? never : I_1) => (I_1 extends Partial<{
        ongoingAccounts: any;
        ongoingAccountsWithProofOfOwnership: any;
    }> ? never : I_1) & {
        ongoingAccountsWithProofOfOwnership: {
            quantity: number;
            quantifier: "exactly" | "atLeast";
        };
    };
};
export {};
