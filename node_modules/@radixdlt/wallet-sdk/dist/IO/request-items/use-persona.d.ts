import { AuthUsePersonaRequestItem, AuthUsePersonaRequestResponseItem, Persona } from '../schemas';
export type UsePersona = {
    wallet: {
        request: AuthUsePersonaRequestItem;
        response: AuthUsePersonaRequestResponseItem;
    };
    method: {
        input: {
            identityAddress: string;
        };
        output: {
            persona: Persona;
        };
    };
};
type NotAllowedKeys = Partial<{
    login: any;
    usePersona: any;
}>;
export declare const usePersona: (identityAddress: string) => <I>(input: I extends Partial<{
    login: any;
    usePersona: any;
}> ? never : I) => (I extends Partial<{
    login: any;
    usePersona: any;
}> ? never : I) & {
    usePersona: {
        discriminator: string;
        identityAddress: string;
    };
};
export {};
