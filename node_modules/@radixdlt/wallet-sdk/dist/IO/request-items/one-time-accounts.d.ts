import { Account, AccountWithProofOfOwnership, NumberOfAccountsQuantifier, OneTimeAccountsRequestItem, OneTimeAccountsWithoutProofOfOwnershipRequestResponseItem, OneTimeAccountsWithProofOfOwnershipRequestResponseItem } from '../schemas';
export type OneTimeAccounts = {
    WithoutProofOfOwnership: {
        wallet: {
            request: OneTimeAccountsRequestItem;
            response: OneTimeAccountsWithoutProofOfOwnershipRequestResponseItem;
        };
        method: {
            input: {
                quantity?: number;
                quantifier?: NumberOfAccountsQuantifier;
            };
            output: {
                oneTimeAccounts: Account[];
            };
        };
    };
    WithProofOfOwnership: {
        wallet: {
            request: OneTimeAccountsRequestItem;
            response: OneTimeAccountsWithProofOfOwnershipRequestResponseItem;
        };
        method: {
            input: {
                quantity?: number;
                quantifier?: NumberOfAccountsQuantifier;
            };
            output: {
                oneTimeAccounts: AccountWithProofOfOwnership[];
            };
        };
    };
};
type NotAllowedKeys = Partial<{
    oneTimeAccountsWithProofOfOwnership: any;
    oneTimeAccountsWithoutProofOfOwnership: any;
}>;
export declare const oneTimeAccounts: {
    withoutProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I>(input: I extends Partial<{
        oneTimeAccountsWithProofOfOwnership: any;
        oneTimeAccountsWithoutProofOfOwnership: any;
    }> ? never : I) => (I extends Partial<{
        oneTimeAccountsWithProofOfOwnership: any;
        oneTimeAccountsWithoutProofOfOwnership: any;
    }> ? never : I) & {
        oneTimeAccountsWithoutProofOfOwnership: {
            quantity: number;
            quantifier: "exactly" | "atLeast";
        };
    };
    withProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I_1>(input: I_1 extends Partial<{
        oneTimeAccountsWithProofOfOwnership: any;
        oneTimeAccountsWithoutProofOfOwnership: any;
    }> ? never : I_1) => (I_1 extends Partial<{
        oneTimeAccountsWithProofOfOwnership: any;
        oneTimeAccountsWithoutProofOfOwnership: any;
    }> ? never : I_1) & {
        oneTimeAccountsWithProofOfOwnership: {
            quantity: number;
            quantifier: "exactly" | "atLeast";
        };
    };
};
export {};
