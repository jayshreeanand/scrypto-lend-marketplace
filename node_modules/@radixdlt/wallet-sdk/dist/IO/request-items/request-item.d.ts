export declare const requestItem: {
    readonly oneTimeAccounts: {
        withoutProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I>(input: I extends Partial<{
            oneTimeAccountsWithProofOfOwnership: any;
            oneTimeAccountsWithoutProofOfOwnership: any;
        }> ? never : I) => (I extends Partial<{
            oneTimeAccountsWithProofOfOwnership: any;
            oneTimeAccountsWithoutProofOfOwnership: any;
        }> ? never : I) & {
            oneTimeAccountsWithoutProofOfOwnership: {
                quantity: number;
                quantifier: "exactly" | "atLeast";
            };
        };
        withProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I_1>(input: I_1 extends Partial<{
            oneTimeAccountsWithProofOfOwnership: any;
            oneTimeAccountsWithoutProofOfOwnership: any;
        }> ? never : I_1) => (I_1 extends Partial<{
            oneTimeAccountsWithProofOfOwnership: any;
            oneTimeAccountsWithoutProofOfOwnership: any;
        }> ? never : I_1) & {
            oneTimeAccountsWithProofOfOwnership: {
                quantity: number;
                quantifier: "exactly" | "atLeast";
            };
        };
    };
    readonly ongoingAccounts: {
        withoutProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I_2 extends {
            usePersona: any;
        } | {
            loginWithoutChallenge: any;
        } | {
            loginWithChallenge: any;
        }>(input: I_2 extends Partial<{
            ongoingAccounts: any;
            ongoingAccountsWithProofOfOwnership: any;
        }> ? never : I_2) => (I_2 extends Partial<{
            ongoingAccounts: any;
            ongoingAccountsWithProofOfOwnership: any;
        }> ? never : I_2) & {
            ongoingAccountsWithoutProofOfOwnership: {
                quantity: number;
                quantifier: "exactly" | "atLeast";
            };
        };
        withProofOfOwnership: (quantity?: number, quantifier?: "exactly" | "atLeast") => <I_3 extends {
            usePersona: any;
        } | {
            loginWithoutChallenge: any;
        } | {
            loginWithChallenge: any;
        }>(input: I_3 extends Partial<{
            ongoingAccounts: any;
            ongoingAccountsWithProofOfOwnership: any;
        }> ? never : I_3) => (I_3 extends Partial<{
            ongoingAccounts: any;
            ongoingAccountsWithProofOfOwnership: any;
        }> ? never : I_3) & {
            ongoingAccountsWithProofOfOwnership: {
                quantity: number;
                quantifier: "exactly" | "atLeast";
            };
        };
    };
    readonly oneTimePersonaData: (...fields: string[]) => <I_4>(input: I_4 extends {
        oneTimePersonaData: any;
    } ? never : I_4) => (I_4 extends {
        oneTimePersonaData: any;
    } ? never : I_4) & {
        oneTimePersonaData: {
            fields: string[];
        };
    };
    readonly ongoingPersonaData: (...fields: string[]) => <I_5 extends {
        usePersona: any;
    } | {
        login: any;
    }>(input: I_5 extends {
        ongoingPersonaData: any;
    } ? never : I_5) => (I_5 extends {
        ongoingPersonaData: any;
    } ? never : I_5) & {
        ongoingPersonaData: {
            fields: string[];
        };
    };
    readonly login: {
        withoutChallenge: () => <I_6>(input: I_6 extends Partial<{
            persona: any;
            loginWithoutChallenge: any;
            loginWithChallenge: any;
        }> ? never : I_6) => (I_6 extends Partial<{
            persona: any;
            loginWithoutChallenge: any;
            loginWithChallenge: any;
        }> ? never : I_6) & {
            loginWithoutChallenge: {
                discriminator: string;
            };
        };
        withChallenge: (challenge: string) => <I_7>(input: I_7 extends Partial<{
            persona: any;
            loginWithoutChallenge: any;
            loginWithChallenge: any;
        }> ? never : I_7) => (I_7 extends Partial<{
            persona: any;
            loginWithoutChallenge: any;
            loginWithChallenge: any;
        }> ? never : I_7) & {
            loginWithChallenge: {
                discriminator: string;
                challenge: string;
            };
        };
    };
    readonly usePersona: (identityAddress: string) => <I_8>(input: I_8 extends Partial<{
        login: any;
        usePersona: any;
    }> ? never : I_8) => (I_8 extends Partial<{
        login: any;
        usePersona: any;
    }> ? never : I_8) & {
        usePersona: {
            discriminator: string;
            identityAddress: string;
        };
    };
};
