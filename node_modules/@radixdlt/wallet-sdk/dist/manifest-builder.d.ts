import { ResourceAddressString, PackageAddressString, ComponentAddressString } from './scrypto-value';
export declare class Manifest {
    instructions: string[];
    constructor(instructions: string[]);
    toString(): string;
}
export declare class ManifestBuilder {
    private readonly instructions;
    private readonly buckets;
    private readonly proofs;
    private id_allocator;
    constructor();
    /**
     * Take all the given resource from worktop.
     *
     * @param resourceAddress The resource address
     * @param bucketName The name of the new bucket
     * @returns
     */
    takeFromWorktop(resourceAddress: ResourceAddressString, bucketName: string): ManifestBuilder;
    /**
     * Take some amount of resource from worktop.
     *
     * @param amount The amount
     * @param resourceAddress The resource address
     * @param bucketName The name of the new bucket
     * @returns
     */
    takeFromWorktopByAmount(amount: number, resourceAddress: ResourceAddressString, bucketName: string): ManifestBuilder;
    /**
     * Take some non-fungibles from worktop.
     *
     * @param nonFungibleIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @param bucketName The name of the new bucket
     * @returns
     */
    takeFromWorktopByIds(nonFungibleIds: string, resourceAddress: ResourceAddressString, bucketName: string): ManifestBuilder;
    /**
     * Returns a bucket to worktop.
     *
     * @param bucketName The bucket name
     * @returns
     */
    returnToWorktop(bucketName: string): this;
    /**
     * Asserts worktop contains resource.
     *
     * @param resourceAddress The resource address
     * @returns
     */
    assertWorktopContains(resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Asserts worktop contains some amount of resource.
     *
     * @param amount The amount
     * @param resourceAddress The resource address
     * @returns
     */
    assertWorktopContainsByAmount(amount: number, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Asserts worktop contains some non-fungibles.
     *
     * @param nonFungibleIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @returns
     */
    assertWorktopContainsByIds(nonFungibleIds: string, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Pops the most recent proof from the auth zone.
     *
     * @param proofName The name of the new proof
     * @returns
     */
    popFromAuthZone(proofName: string): ManifestBuilder;
    /**
     * Pushes a proof onto the auth zone.
     *
     * @param proofName The proof name
     * @returns
     */
    pushToAuthZone(proofName: string): ManifestBuilder;
    /**
     * Clears the auth zone.
     *
     * @returns
     */
    clearAuthZone(): ManifestBuilder;
    /**
     * Creates a composite proof from the auth zone with all the given resource.
     *
     * @param resourceAddress The resource address
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromAuthZone(resourceAddress: ResourceAddressString, proofName: string): ManifestBuilder;
    /**
     * Creates a composite proof from the auth zone for the given amount.
     *
     * @param amount The amount
     * @param resourceAddress The resource address
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromAuthZoneByAmount(amount: number, resourceAddress: ResourceAddressString, proofName: string): ManifestBuilder;
    /**
     * Creates a composite proof from the auth zone for the give non-fungibles.
     *
     * @param nonFungibleIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromAuthZoneByIds(nonFungibleIds: string, resourceAddress: ResourceAddressString, proofName: string): ManifestBuilder;
    /**
     * Creates a proof from a bucket
     *
     * @param bucketName The bucket name
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromBucket(bucketName: string, proofName: string): ManifestBuilder;
    /**
     * Clones a proof.
     *
     * @param proofName The proof name
     * @param cloneName The clone proof name
     * @returns
     */
    cloneProof(proofName: string, cloneName: string): ManifestBuilder;
    /**
     * Drops a proof.
     *
     * @param proofName The proof name
     * @returns
     */
    dropProof(proofName: string): ManifestBuilder;
    /**
     * Calls a function on a blueprint.
     *
     * @param packageAddress  The package address
     * @param blueprintName  The blueprint name
     * @param functionName  The function name
     * @param args The arguments, which must be in manifest format, e.g. `1u8`, `"string"`, `Bucket("name")`
     */
    callFunction(packageAddress: PackageAddressString, blueprintName: string, functionName: string, args: string[]): ManifestBuilder;
    /**
     * Calls a method on a component.
     *
     * @param componentAddress  The component address
     * @param methodName The method name
     * @param args The arguments, which must be in manifest format, e.g. `1u8`, `"string"`, `Bucket("name")`
     * @returns
     */
    callMethod(componentAddress: ComponentAddressString, methodName: string, args: string[]): ManifestBuilder;
    /**
     * Calls a native function
     *
     * @param blueprintName  The blueprint name
     * @param functionName  The function name
     * @param args The arguments, which must be in manifest format, e.g. `1u8`, `"string"`, `Bucket("name")`
     */
    callNativeFunction(blueprintName: string, functionName: string, args: string[]): ManifestBuilder;
    /**
     * Calls a method on a component.
     *
     * @param componentAddress  The component address
     * @param methodName The method name
     * @param args The arguments, which must be in manifest format, e.g. `1u8`, `"string"`, `Bucket("name")`
     * @returns
     */
    callNativeMethod(receiver: string, methodName: string, args: string[]): ManifestBuilder;
    /**
     * Publishes a package.
     * @param code_hash The package wasm code hash
     * @param abi_hash The package ABI hash
     * @param owner_badge The owner badge
     */
    publishPackageWithOwner(code_hash: string, abi_hash: string, owner_badge: string): ManifestBuilder;
    /**
     * Create resource
     * @param bucketName The name of the bucket to burn
     * @returns
     */
    createResource(resource_type: string, metadata: string, access_rules: string, mint_params: string): ManifestBuilder;
    /**
     * Burns a bucket
     *
     * @param bucketName The name of the bucket to burn
     * @returns
     */
    burnBucket(bucketName: string): ManifestBuilder;
    /**
     * Mints additional fungible token
     *
     * @param resourceAddress The resource address of the fungible resource
     * @param amount The amount to mint
     * @returns
     */
    mintFungible(resourceAddress: ResourceAddressString, amount: number): ManifestBuilder;
    /**
     * Withdraws all the given resource from account.
     *
     * @param accountAddress The account component address
     * @param resourceAddress The resource address
     * @returns
     */
    withdrawFromAccount(accountAddress: ComponentAddressString, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Withdraws some amount of resource from account.
     *
     * @param accountAddress The account component address
     * @param amount The amount
     * @param resourceAddress The resource address
     * @returns
     */
    withdrawFromAccountByAmount(accountAddress: ComponentAddressString, amount: number, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Withdraws some non-fungibles from account.
     *
     * @param accountAddress The account component address
     * @param nonFungibleIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @returns
     */
    withdrawFromAccountByIds(accountAddress: ComponentAddressString, nonFungibleIds: string, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Creates proof of all the given resource from account.
     *
     * @param accountAddress The account component address
     * @param resourceAddress The resource address
     * @returns
     */
    createProofFromAccount(accountAddress: ComponentAddressString, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Creates proof of some amount of resource from account.
     *
     * @param accountAddress The account component address
     * @param amount The amount
     * @param resourceAddress The resource address
     * @returns
     */
    createProofFromAccountByAmount(accountAddress: ComponentAddressString, amount: number, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Creates proof of some non-fungibles from account.
     *
     * @param accountAddress The account component address
     * @param nonFungibleIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @returns
     */
    createProofFromAccountByIds(accountAddress: ComponentAddressString, nonFungibleIds: string, resourceAddress: ResourceAddressString): ManifestBuilder;
    /**
     * Builds a transaction manifest.
     *
     * @returns a transaction manifest
     */
    build(): Manifest;
}
