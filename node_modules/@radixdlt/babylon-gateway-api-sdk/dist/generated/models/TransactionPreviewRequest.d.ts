/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { PublicKey } from './PublicKey';
import type { TransactionPreviewRequestFlags } from './TransactionPreviewRequestFlags';
/**
 *
 * @export
 * @interface TransactionPreviewRequest
 */
export interface TransactionPreviewRequest {
    /**
     * A text-representation of a transaction manifest
     * @type {string}
     * @memberof TransactionPreviewRequest
     */
    manifest: string;
    /**
     * An array of hex-encoded blob data (optional)
     * @type {Array<string>}
     * @memberof TransactionPreviewRequest
     */
    blobs_hex?: Array<string>;
    /**
     * An integer between `0` and `10^10`, marking the epoch at which the transaction starts being valid
     * @type {number}
     * @memberof TransactionPreviewRequest
     */
    start_epoch_inclusive: number;
    /**
     * An integer between `0` and `10^10`, marking the epoch at which the transaction is no longer valid
     * @type {number}
     * @memberof TransactionPreviewRequest
     */
    end_epoch_exclusive: number;
    /**
     *
     * @type {PublicKey}
     * @memberof TransactionPreviewRequest
     */
    notary_public_key?: PublicKey;
    /**
     * Whether the notary should count as a signatory (optional, default false)
     * @type {boolean}
     * @memberof TransactionPreviewRequest
     */
    notary_as_signatory?: boolean;
    /**
     * An integer between `0` and `2^32 - 1`, giving the maximum number of cost units available for transaction execution
     * @type {number}
     * @memberof TransactionPreviewRequest
     */
    cost_unit_limit: number;
    /**
     * An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
     * @type {number}
     * @memberof TransactionPreviewRequest
     */
    tip_percentage: number;
    /**
     * A decimal-string-encoded integer between `0` and `2^64 - 1`, used to ensure the transaction intent is unique.
     * @type {string}
     * @memberof TransactionPreviewRequest
     */
    nonce: string;
    /**
     * A list of public keys to be used as transaction signers
     * @type {Array<PublicKey>}
     * @memberof TransactionPreviewRequest
     */
    signer_public_keys: Array<PublicKey>;
    /**
     *
     * @type {TransactionPreviewRequestFlags}
     * @memberof TransactionPreviewRequest
     */
    flags: TransactionPreviewRequestFlags;
}
/**
 * Check if a given object implements the TransactionPreviewRequest interface.
 */
export declare function instanceOfTransactionPreviewRequest(value: object): boolean;
export declare function TransactionPreviewRequestFromJSON(json: any): TransactionPreviewRequest;
export declare function TransactionPreviewRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionPreviewRequest;
export declare function TransactionPreviewRequestToJSON(value?: TransactionPreviewRequest | null): any;
