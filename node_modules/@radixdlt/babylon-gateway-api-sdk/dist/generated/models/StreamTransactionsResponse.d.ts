/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CommittedTransactionInfo } from './CommittedTransactionInfo';
import type { LedgerState } from './LedgerState';
/**
 *
 * @export
 * @interface StreamTransactionsResponse
 */
export interface StreamTransactionsResponse {
    /**
     *
     * @type {LedgerState}
     * @memberof StreamTransactionsResponse
     */
    ledger_state: LedgerState;
    /**
     * Total number of items in underlying collection, fragment of which is available in `items` collection.
     * @type {number}
     * @memberof StreamTransactionsResponse
     */
    total_count?: number | null;
    /**
     * If specified, contains a cursor to query previous page of the `items` collection.
     * @type {string}
     * @memberof StreamTransactionsResponse
     */
    previous_cursor?: string | null;
    /**
     * If specified, contains a cursor to query next page of the `items` collection.
     * @type {string}
     * @memberof StreamTransactionsResponse
     */
    next_cursor?: string | null;
    /**
     * The page of user transactions.
     * @type {Array<CommittedTransactionInfo>}
     * @memberof StreamTransactionsResponse
     */
    items: Array<CommittedTransactionInfo>;
}
/**
 * Check if a given object implements the StreamTransactionsResponse interface.
 */
export declare function instanceOfStreamTransactionsResponse(value: object): boolean;
export declare function StreamTransactionsResponseFromJSON(json: any): StreamTransactionsResponse;
export declare function StreamTransactionsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamTransactionsResponse;
export declare function StreamTransactionsResponseToJSON(value?: StreamTransactionsResponse | null): any;
