/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { LedgerStateSelector } from './LedgerStateSelector';
/**
 *
 * @export
 * @interface StreamTransactionsRequest
 */
export interface StreamTransactionsRequest {
    /**
     *
     * @type {LedgerStateSelector}
     * @memberof StreamTransactionsRequest
     */
    at_ledger_state?: LedgerStateSelector | null;
    /**
     * This cursor allows forward pagination, by providing the cursor from the previous request.
     * @type {string}
     * @memberof StreamTransactionsRequest
     */
    cursor?: string | null;
    /**
     * The page size requested.
     * @type {number}
     * @memberof StreamTransactionsRequest
     */
    limit_per_page?: number | null;
    /**
     *
     * @type {LedgerStateSelector}
     * @memberof StreamTransactionsRequest
     */
    from_ledger_state?: LedgerStateSelector | null;
    /**
     * Limit returned transactions by their kind. Defaults to `user`.
     * @type {string}
     * @memberof StreamTransactionsRequest
     */
    kind_filter?: StreamTransactionsRequestKindFilterEnum;
    /**
     * Configures the order of returned result set. Defaults to `desc`.
     * @type {string}
     * @memberof StreamTransactionsRequest
     */
    order?: StreamTransactionsRequestOrderEnum;
}
/**
 * @export
 */
export declare const StreamTransactionsRequestKindFilterEnum: {
    readonly User: "User";
    readonly EpochChange: "EpochChange";
    readonly All: "All";
};
export declare type StreamTransactionsRequestKindFilterEnum = typeof StreamTransactionsRequestKindFilterEnum[keyof typeof StreamTransactionsRequestKindFilterEnum];
/**
 * @export
 */
export declare const StreamTransactionsRequestOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export declare type StreamTransactionsRequestOrderEnum = typeof StreamTransactionsRequestOrderEnum[keyof typeof StreamTransactionsRequestOrderEnum];
/**
 * Check if a given object implements the StreamTransactionsRequest interface.
 */
export declare function instanceOfStreamTransactionsRequest(value: object): boolean;
export declare function StreamTransactionsRequestFromJSON(json: any): StreamTransactionsRequest;
export declare function StreamTransactionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamTransactionsRequest;
export declare function StreamTransactionsRequestToJSON(value?: StreamTransactionsRequest | null): any;
